<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>许宜森的个人博客</title>
  
  <subtitle>机器学习|深度学习|软件工程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://daixinyuxuyisen.cn/"/>
  <updated>2018-06-13T13:20:33.419Z</updated>
  <id>http://daixinyuxuyisen.cn/</id>
  
  <author>
    <name>许宜森</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单代码克隆检测(三)(精简数据)</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/13/experment4/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/13/experment4/</id>
    <published>2018-06-13T12:36:28.000Z</published>
    <updated>2018-06-13T13:20:33.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，"><a href="#今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，" class="headerlink" title="今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，"></a>今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，</h3><a id="more"></a><ul><li>实验准备：  <ul><li>昨天老师提及到了一点<code>传统的clone detection一般只考虑长度10行以上的代码片段</code>，恰好scala meta 提供了position属性可以供我们进行筛选，但是scala meta 提供的并不是行数，而是这个方法中有多少的<code>字</code>,下面简单展示几个例子，让我们了解一下方法的具体规模信息：  <ul><li>200 字节：<br><img src="/images/14.png" alt="图片描述">  </li><li>300字节：<br><img src="/images/15.png" alt="图片描述">  </li><li>400字节：<br><img src="/images/16.png" alt="图片描述">  </li><li>500字节：<br><img src="/images/17.png" alt="图片描述">  </li><li>600字节：<br><img src="/images/18.png" alt="图片描述">  </li><li>1000字节：<br><img src="/images/19.png" alt="图片描述"><br>然后我查看了<code>spark</code>的几个<code>scala</code>文件，发现大多数的方法的长度都很小，都在<code>200</code>-<code>300</code>之间，但是为了获取较为大的函数，我选取了<code>500</code>字节作为阈值进行筛选。代码：<br><img src="/images/20.png" alt="图片描述">  </li></ul></li></ul></li><li>实验步骤：  <ul><li>首先，提取<code>leaf node</code> 和<code>path node</code>数据，共得到<code>5387</code>条数据：<br><img src="/images/21.png" alt="图片描述">   </li><li>然后分别对<code>leaf node</code>和<code>path node</code>属性进行<code>wordembeddings</code>然后输入到<code>AutoenCODE</code>，(这里提及一下，这个框架里面有几个参数，我在实验的时候并没有进行修改，后续实验的时候需要研究一下，修改超参数观察数据变化。)  </li></ul></li><li>实验结果：  <ul><li><code>leaf node</code>:  <ul><li>距离矩阵：<br><img src="/images/22.png" alt="图片描述">   </li><li>提取的距离小于<code>1e-16</code>的克隆对：<br>总共提取出了114对代码克隆对：<br><img src="/images/23.png" alt="图片描述">   </li><li>例子：<br> D:\Git\spark\core\src\main\scala\org\apache\spark\api\python\PythonRunner.scala<br> <img src="/images/24.png" alt="图片描述"><br> D:\Git\spark\sql\core\src\main\scala\org\apache\spark\sql\execution\python\PythonUDFRunner.scala<br> <img src="/images/25.png" alt="图片描述"> </li></ul></li><li><code>path node</code>:  <ul><li>距离矩阵：<br><img src="/images/26.png" alt="图片描述">   </li><li>提取的距离小于<code>1e-16</code>的克隆对：<br>总共提取出了185对代码克隆对：<br><img src="/images/27.png" alt="图片描述">   </li><li>与<code>leaf node</code> 进行比较，前面我们举的两个例子是 id 为<code>36,4228</code>的例子,我们发现在<code>path node</code>的结果中不仅出现了<code>36,4228</code>的克隆对，还出现了<code>36,4215</code>的克隆对，所以这里只展示id为<code>4215</code>的代码，进行对比：<br><code>path node</code>:<br><img src="/images/28.png" alt="图片描述"><br><code>leaf node</code>:<br><img src="/images/29.png" alt="图片描述"><br>对别代码：<br>D:\Git\spark\sql\core\src\main\scala\org\apache\spark\sql\execution\python\ArrowPythonRunner.scala<br><img src="/images/30.png" alt="图片描述">  </li></ul></li></ul></li><li>实验总结：  <ul><li>在我看来 <code>path node</code>是在<code>leaf node</code>的基础上进行的扩充，其中<code>leaf node</code>属性提取的克隆对作为主要研究研究对象，<code>path node</code>仅提供辅助分析的作用。  </li><li>本次实验代码长度的阈值设置不是很巧当，有昨天的2w条数据变为今天的100多条数据，中间很多小的代码块也可能存在代码克隆。  </li><li>对于设置代码长度的这个方法，我的想法是只针对<code>path node</code>特征进行操作，因为我们昨天已经发现了，对于<code>leaf node</code>提取的2w条数据发现，基本上代码都是相同的（代码clone的第一种类型），不管是长代码还是短代码，只要全部相同就有很大的可能是代码克隆，所以设置代码长度阈值可以只实施在<code>path node</code>特征上，毕竟起到的是补充辅助的作用。  </li></ul></li></ul><p>加油！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，&quot;&gt;&lt;a href=&quot;#今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，&quot; class=&quot;headerlink&quot; title=&quot;今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，&quot;&gt;&lt;/a&gt;今天主要是解决昨天的问题，第二个特征提取的clone对过多，导致很多较短的方法也被误认为是clone对，今天做的实验室将方法的长度进行了限制，&lt;/h3&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://daixinyuxuyisen.cn/categories/Scala/"/>
    
    
      <category term="clone_detection" scheme="http://daixinyuxuyisen.cn/tags/clone-detection/"/>
    
  </entry>
  
  <entry>
    <title>雅思训练错题整理</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/13/yasi1/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/13/yasi1/</id>
    <published>2018-06-13T05:17:33.000Z</published>
    <updated>2018-06-15T09:00:23.408Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read.</h3><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" password " /> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      the content has been encrypted, enter the password to read.&lt;/br&gt;
    
    </summary>
    
      <category term="英语" scheme="http://daixinyuxuyisen.cn/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="雅思听力" scheme="http://daixinyuxuyisen.cn/tags/%E9%9B%85%E6%80%9D%E5%90%AC%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>简单代码克隆检测二(AST node)</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/12/experment3/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/12/experment3/</id>
    <published>2018-06-12T08:49:10.000Z</published>
    <updated>2018-06-12T11:25:54.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天主要将论文中所说第二个特征-AST-节点类型提取出来，然后输入到模型中进行了验证"><a href="#今天主要将论文中所说第二个特征-AST-节点类型提取出来，然后输入到模型中进行了验证" class="headerlink" title="今天主要将论文中所说第二个特征 AST 节点类型提取出来，然后输入到模型中进行了验证"></a>今天主要将论文中所说第二个特征 <code>AST</code> 节点类型提取出来，然后输入到模型中进行了验证</h3><a id="more"></a>    <ul><li>实验思路： <ul><li>按照论文的思想，第二特征主要用一个<code>high level</code>的特征来体现代码，这个特征就是用 <code>AST</code>节点的类型来表示，比如：<code>Defn.def</code>是方法的类型，<code>Term.for</code>是for语句的类型等等这些，其主要的目的就是让我们处理的方法更加抽象，解决变量名改变(第二种类型clone)克隆方面有着很好的效果。在提取数据的时候作者做了一点小的改变，并没有将所有的节点的类型都作为特征，而是除去了<code>SimpleName</code>,<code>QualifiedName</code>(java)两个类型的节点,相应的我将Scala语言中的<code>Term.Name</code>,<code>Type.Name</code>两个节点的类型也进行了忽略，这样做的主要原因是，第一，这两个节点已经属于较低层次的特征，会与我们之前提取的第一个(identifiers)特征重复,第二是，两节点的数量很多，在java中有将近46%的节点类型在这两个类型之间，所以就直接将这两个节点直接去掉。</li><li>数据提取完以后就按照之前的做法输入到AutoenCODE中去进行训练，观察效果，并与第一次实验做了一下对比。</li></ul></li><li>实验步骤：<ul><li>提取<code>AST</code>节点类型,只要在非叶子节点的visitor中加入相应的统计的代码即可。<br><img src="/images/1.png" alt="图片描述"><br>最终得到的数据的结果如图所示：<br><img src="/images/2.png" alt="图片描述">    </li><li>对提取的数据进行 <code>wordembeddings</code> ,产生相应的词向量：<br><img src="/images/3.png" alt="图片描述">   </li><li>将词向量输入到AutoenCODE模型中进行训练，最终得到距离矩阵：<br><img src="/images/4.png" alt="图片描述">  </li><li>对距离矩阵进行统计，上次实验中只是统计了没行中非零的最小值，所以数据量很小，这次我遍历了整个矩阵，求出距离小于<code>1e-16</code>(上次实验说错了，<code>1e-8</code>是对类级的clone进行判断，这个其实是根据不同的项目来设置不同的值，这里我们暂且先按照论文中的数据俩进行实验)的所有clone对的行数，然后依次找出相应的代码进行比较，与上次的实验结果进行比较。</li></ul></li><li><p>实验结果：</p><ul><li>对于第一次实验，我前面已经说过了，统计的阈值设置成<code>1e-16</code>并且统计所有的数据发现一共有大概有2万条数据，也就是有大概2万对克隆对是通过第一个特征发现的，具体是不是克隆对需要后期人工进行处理，工作十分艰巨。<br>提取克隆对的代码：<br><img src="/images/6.png" alt="图片描述"><br>结果：<br><img src="/images/5.png" alt="图片描述"><br>通过赵俐俐学姐目前的统计的数据来看，这两万条数据中的克隆对是完全一模一样，属于判断是否为clone的第一种类型。例子：<br>D:\Git\spark\core\src\main\scala\org\apache\spark\Accumulable.scala<br><img src="/images/7.png" alt="图片描述"><br>D:\Git\spark\core\src\main\scala\org\apache\spark\util\AccumulatorV2.scala <img src="/images/8.png" alt="图片描述"> </li><li>第二次实验得到的结果更让我吃惊，大概有30w克隆对：<br><img src="/images/9.png" alt="图片描述"><br>对这30w数据进行简单的分析：  <ul><li>第一个特征里面的数据基本上都包含在内  </li><li>其次是一些变量名不同，但具有相同结构的函数被识别出来了：<br>D:\Git\spark\core\src\main\scala\org\apache\spark\Accumulable.scala<br><img src="/images/10.png" alt="图片描述"> </li><li><em>但是其中大多数的数据都是一些判断错误的数据</em>，我对这些数据进行了简单的观察，发现他们有一个特点，就是样本数据短小，往往就几个简单的语句：<br><img src="/images/11.png" alt="图片描述"><br>而数据量小，就会导致很多差别很大的函数被误判为代码 clone:<br><img src="/images/12.png" alt="图片描述"><br>而一些代码很长的判断则更像是代码克隆：<br>D:\Git\spark\core\src\main\scala\org\apache\spark\Aggregator.scala<br><img src="/images/13.png" alt="图片描述"></li></ul></li></ul></li><li><p>下一步工作：  </p><ul><li>与俐俐学姐统计并观察得到的clone对(第一个特征）</li><li>询问并查找如何去除第二种类型的过多的错误数据  </li></ul></li></ul><p>加油！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今天主要将论文中所说第二个特征-AST-节点类型提取出来，然后输入到模型中进行了验证&quot;&gt;&lt;a href=&quot;#今天主要将论文中所说第二个特征-AST-节点类型提取出来，然后输入到模型中进行了验证&quot; class=&quot;headerlink&quot; title=&quot;今天主要将论文中所说第二个特征 AST 节点类型提取出来，然后输入到模型中进行了验证&quot;&gt;&lt;/a&gt;今天主要将论文中所说第二个特征 &lt;code&gt;AST&lt;/code&gt; 节点类型提取出来，然后输入到模型中进行了验证&lt;/h3&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://daixinyuxuyisen.cn/categories/Scala/"/>
    
    
      <category term="clone_detection" scheme="http://daixinyuxuyisen.cn/tags/clone-detection/"/>
    
  </entry>
  
  <entry>
    <title>简单代码克隆检测一(AST leaf)</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/10/experment2/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/10/experment2/</id>
    <published>2018-06-10T09:56:28.000Z</published>
    <updated>2018-06-12T08:51:36.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。"><a href="#今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。" class="headerlink" title="今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。"></a>今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。<a id="more"></a></h3><ul><li>实验思路：<ul><li>将提取的Scala叶子节点的特征作为文本数据，输入到<code>AutoenCODE</code>中 ：AutoenCODE is a Deep Learning infrastructure that allows to encode source code fragments into vector representations, which can be used to learn similarities. <a href="https://github.com/micheletufano/AutoenCODE" target="_blank" rel="noopener">https://github.com/micheletufano/AutoenCODE</a><br>基本上所有的代码这个网站已经提供了，所以只要将代码clone到本地，配置一下环境就可以开始我们的实验。具体的AutoenCODE的原理，我会在以后的博客中详细的解释，本篇博客主要讲如何使用这个框架。</li></ul></li><li><p>实验步骤：</p><ul><li>按照<code>AutoenCODE</code>给的教程，第一步是将我们整理的数据转化成词向量，这里他使用的工具是word2vec，这里注意一下，他的这个word2vec需要build但是windows系统不支持这个build，所以我将转化词向量的这部分的工作转移到了centos服务器上进行，最终得到了测试样本的所有的词向量的数据。</li><li><p>接下来就将这个词向量输入到<code>Recursive Autoencoder</code>(论文中提及是一个斯坦福的情感分析器)中去，最终得到五个结果文件(这里提及一点，训练时间实在是太长了，源代码是使用matlab写的。27000条数据整整跑了一个小时，而且CUP满负荷运行，可能是我的电脑配置低，之后需要优化)。分别是：</p><ul><li><code>data.mat</code> contains the input data including the corpus, vocabulary (a 1-by-|V| cell array), and We (the m-by-|V| word embedding matrix where m is the size of the word vectors). So columns of We correspond to word embeddings.</li><li><code>corpus.dist.matrix.mat</code> contains the distance matrix saved as matlab file. The values in the distance matrix are doubles that represent the Euclidean distance between two sentences. In particular, the cell (i,j) contains the Euclidean distance between the i-th sentence (i.e., i-th line in corpus.src) and the j-th sentence in the corpus.</li><li><code>corpus.dist.matrix.csv</code> contains the distance matrix saved as .csv file.</li><li><code>corpus.sentence_codes.mat</code> contain the embeddings for each sentence in the corpus. The sentence_codes object contains the representations for sentences, and the pairwise Euclidean distance between these representations are used to measure similarity.</li><li><code>detector.mat</code> contains opttheta (the trained clone detector), hparams, and options.   </li></ul><p>这里对我们最有用的就是那个矩阵，它显示两句话的距离大小，越小越相似。<br><img src="https://i.loli.net/2018/06/10/5b1cfe2b76237.png" alt="图片描述"><br>那么大的矩阵，怎么进行分析！！，只能硬着头皮通过写matlab代码，将矩阵中每行的最小值（非零）提取出来，这样就能得到27000多个最小值，然后再通过这27000个最小值进行筛选，因为本次实验主要看一下效果所以没有注意到那么多的细节，先把最小值求出来先看看。<br>然后我将最小值又进行了划分，论文中说他们的想法是如果距离小于<code>1e-8</code>就认为他们是克隆的代码，然后我以这个为分界线进行了筛选，发现只有5对符合要求，最终的结果在最终结果那里进行展示。求取最小值代码：<br><img src="https://i.loli.net/2018/06/10/5b1cffc14224f.png" alt="图片描述">  </p></li></ul></li><li><p>实验结果：</p><ul><li>当判断距离为1e-8时(5对) </li><li>当判断距离为1e-4时(75对)</li><li>当判断距离为1e-2时(800多对)<br>通过观察主要分为以下几个类型：  <ul><li>函数重载和相似函数(在同一个文件中)<br><img src="https://i.loli.net/2018/06/10/5b1cf6dcac4d4.png" alt="图片描述"><br>(5对)<br><img src="https://i.loli.net/2018/06/10/5b1cf8dac24e9.png" alt="图片描述"><br>(800多对)<br><img src="https://i.loli.net/2018/06/10/5b1cf73260cd5.png" alt="图片描述"><br>(75对)<br><img src="https://i.loli.net/2018/06/10/5b1cf808e710b.png" alt="图片描述"><br><img src="https://i.loli.net/2018/06/10/5b1cf821d17bc.png" alt="图片描述"><br>(75对)<br>D:\Git\spark\core\src\test\scala\org\apache\spark\deploy\master\MasterSuite.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf8420d854.png" alt="图片描述"><br>D:\Git\spark\core\src\test\scala\org\apache\spark\deploy\master\MasterSuite.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf859f2b3b.png" alt="图片描述"><br>(75对)  </li><li>父子继承关系或者同时继承同一个父类的子类之间(不同文件)<br>D:\Git\spark\core\src\main\scala\org\apache\spark\scheduler\DAGScheduler.scala  (父类)<br><img src="https://i.loli.net/2018/06/10/5b1cf8c23604c.png" alt="图片描述"><br>D:\Git\spark\core\src\test\scala\org\apache\spark\scheduler\TaskSetManagerSuite.scala (子类)<br><img src="https://i.loli.net/2018/06/10/5b1cf8ae30b8c.png" alt="图片描述"><br>(75对)<br>D:\Git\spark\core\src\test\scala\org\apache\spark\scheduler\SparkListenerWithClusterSuite.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf883e30b0.png" alt="图片描述"><br>D:\Git\spark\core\src\test\scala\org\apache\spark\deploy\LogUrlsStandaloneSuite.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf8985af35.png" alt="图片描述"><br>(800对)  </li><li>相似或者相同的函数(不同文件)<br>D:\Git\spark\core\src\main\scala\org\apache\spark\util\collection\PrimitiveKeyOpenHashMap.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf6f60d131.png" alt="图片描述"><br>D:\Git\spark\graphx\src\main\scala\org\apache\spark\graphx\util\collection\GraphXPrimitiveKeyOpenHashMap.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf71289bdf.png" alt="图片描述"><br>(75对)<br>D:\Git\spark\core\src\main\scala\org\apache\spark\deploy\history\HistoryServerArguments.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf74b107b6.png" alt="图片描述"><br>D:\Git\spark\core\src\main\scala\org\apache\spark\deploy\worker\WorkerArguments.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf760d148d.png" alt="图片描述"><br>(75对)  </li><li>不像是克隆的函数(我的观点)<br>D:\Git\spark\core\src\main\scala\org\apache\spark\status\LiveEntity.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf7772a91a.png" alt="图片描述"><br>D:\Git\spark\core\src\main\scala\org\apache\spark\status\LiveEntity.scala<br><img src="https://i.loli.net/2018/06/10/5b1cf7c51aa3d.png" alt="图片描述"><br>(75对)</li></ul></li></ul></li><li>实验总结：<br>  由于时间和人手有限，现在只是对这几个结果进行了分析，还有很多对都没有看，之后找时间看看还有没有其他类型，或者老师可以分配几个人帮我看看。</li><li>附录：<br>  在得到结果以后，这是忘了如何去找源文件，这里我在原来的parse的基础上加上了一个统计样本所在的文件的文件，通过<code>行数</code>来查找对应的文件，感觉很费时费力。<br>  <img src="https://i.loli.net/2018/06/10/5b1cf96c01a60.png" alt="图片描述"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。&quot;&gt;&lt;a href=&quot;#今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。&quot; class=&quot;headerlink&quot; title=&quot;今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。&quot;&gt;&lt;/a&gt;今天主要将昨天得到的数据，放到之前看到的模型中跑了一下，看了一下效果，简单叙述一下实验。
    
    </summary>
    
      <category term="Scala" scheme="http://daixinyuxuyisen.cn/categories/Scala/"/>
    
    
      <category term="code_detection" scheme="http://daixinyuxuyisen.cn/tags/code-detection/"/>
    
  </entry>
  
  <entry>
    <title>AST树提取进展</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/09/experment1/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/09/experment1/</id>
    <published>2018-06-09T12:55:53.000Z</published>
    <updated>2018-06-09T14:07:14.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据"><a href="#今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据" class="headerlink" title="今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据"></a>今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据</h2><a id="more"></a><ul><li>实验步骤：<ul><li>按照昨天写的代码，只需要加一个循环遍历文件的函数就可以了 <img src="https://i.loli.net/2018/06/09/5b1bcfec946d8.png" alt="图片描述">然后第一个问题出现了，scala meta 这个工具还不是很成熟，对于部分文件在parse的时候会抛出异常 <img src="https://i.loli.net/2018/06/09/5b1bd122d8519.png" alt="图片描述"><br>在网上查了好久，网上也有许多人遇到这个问题，但是scala meta并没有提供解决的办法。经过不懈的努力，最终在评论区找到了解决方法，这个bug主要是<code>s&quot;xxxxxxx&quot;</code>后面直接换行引起的(黑人问号)，只要在<code>\n</code>后面加一个空格就可以了(黑人问号)。 <img src="https://i.loli.net/2018/06/09/5b1bd7d5baf20.png" alt="图片描述"><br>所以我就对我们输入的数据进行了预处理，所有包含字符串<code>s&quot;xxxxx&quot;</code>的行的<code>\n</code>都进行了变换。 <img src="https://i.loli.net/2018/06/09/5b1bd828e787a.png" alt="图片描述"></li><li>第二个问题，嵌套函数的问题，因为我们测试的数据是在方法级别上的进行抽取，所以就会出现嵌套函数的问题，具体的嵌套函数的示例如下图所示：    <img src="https://i.loli.net/2018/06/09/5b1bd8cbbc23b.png" alt="图片描述"> 在这里的问题主要是将子函数抽取出来作为一条数据还是将子函数作为一条像if语句那样的句子作为父函数的一部分，经过跟几位老师讨论，我们决定采用第一种方式，原因是第一子函数的粒度小，第二就是在函数的功能上面还是子函数为主，对于第四种类型的代码克隆的判断来说更加有利。所以我利用栈的思想将子函数剥离出来：<img src="https://i.loli.net/2018/06/09/5b1bd922794ab.png" alt="图片描述"><br>最终的结果是：    <img src="https://i.loli.net/2018/06/09/5b1bd8eb96c6d.png" alt="图片描述"><br>其中13是父函数，12是子函数。</li></ul></li><li>最终结果：<ul><li>成功提取spark代码里面的27042条样本，明天开始进行测试算法效果，并且再读一遍论文，整理一下文档<br><img src="https://i.loli.net/2018/06/09/5b1bd8a286de6.png" alt="图片描述"><br>加油！！！！  还要好好学一下英语和线代和算法！！！</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据&quot;&gt;&lt;a href=&quot;#今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据&quot; class=&quot;headerlink&quot; title=&quot;今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据&quot;&gt;&lt;/a&gt;今天主要把昨天没有做完的工作进行了扩展，由提取单一文件的叶子节点扩展到提取到整个项目的叶子节点，然后将类级别的数据修改成方法级别的数据&lt;/h2&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://daixinyuxuyisen.cn/categories/Scala/"/>
    
    
      <category term="AST" scheme="http://daixinyuxuyisen.cn/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/08/AST/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/08/AST/</id>
    <published>2018-06-08T01:42:52.000Z</published>
    <updated>2018-06-09T14:12:10.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Scala-AST-叶子节点提取"><a href="#Scala-AST-叶子节点提取" class="headerlink" title="Scala AST 叶子节点提取"></a>Scala AST 叶子节点提取</h3><ul><li>背景：<ul><li>前几天由于考试没有来得及整理基础知识，今天在这里先整理一下这两天做的Scala叶子节点的值提取</li><li>Scala 是一门多范式（multi-paradigm）的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。Scala 运行在Java虚拟机上，并兼容现有的Java程序。Scala 源代码被编译成Java字节码，所以它可以运行于JVM之上，并可以调用现有的Java类库。(百度百科）<a id="more"></a></li></ul></li><li>实验步骤：<ul><li>使用的工具：<ul><li>scala meta : <a href="https://scalameta.org/" target="_blank" rel="noopener">https://scalameta.org/</a></li><li>Intellij Idea: <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/</a></li></ul></li><li>借助的参考资料：<ul><li>scala meta的示例程序</li><li>浏览器 构造 scala AST 树：<a href="https://astexplorer.net/#/gist/22cf8a3fcb2155c087ae94b4d194c1b6/d10c646ecfae4c69c919408aa3aaefb2deda2df7" target="_blank" rel="noopener">https://astexplorer.net/#/gist/22cf8a3fcb2155c087ae94b4d194c1b6/d10c646ecfae4c69c919408aa3aaefb2deda2df7</a></li></ul></li><li>实验带代码：<br>  查看 scala meta 源程序可以发现 ，该工具里面有一个Tree的类，该类有children 属性和parent属性：<img src="https://i.loli.net/2018/06/08/5b1a5c0fda8dd.png" alt="图片描述"><br>  所以可以根据这个类来进行遍历得到我们需要的叶子节点的数据，在这里我采用visitor的方式来进行遍历。主要的遍历的对象有以下几个：<br>  <img src="https://i.loli.net/2018/06/08/5b1a5cab0871e.png" alt="图片描述"><br>  分别代表Scala中的各个语法，这里在做的时候出现了几个问题。一个是Term.param和Type.param 需要“精准的查找”，不能像其他的Term.Name,Term.Annonate那样，可以通过Term来进行查找：<img src="https://i.loli.net/2018/06/08/5b1a5dc5f0c91.png" alt="标题"><br>  也就是说其他的Term里面的属性可以通过遍历Term然后再进行查找，但是这个Term.param必须在第一次遍历的时候就指出来，难道Term.param不属于Term?很奇怪。以后再查一查。</li><li>代码的逻辑并不难，下面就开始打印叶子节点，通过观察浏览器AST解析器<a href="https://astexplorer.net/#/gist/22cf8a3fcb2155c087ae94b4d194c1b6/d10c646ecfae4c69c919408aa3aaefb2deda2df7" target="_blank" rel="noopener">https://astexplorer.net/#/gist/22cf8a3fcb2155c087ae94b4d194c1b6/d10c646ecfae4c69c919408aa3aaefb2deda2df7</a><br>发现：叶子节点主要在以下几个地方打印：<br><img src="https://i.loli.net/2018/06/08/5b1a5f3dcd9de.png" alt="图片描述">基本数据类型<br><img src="https://i.loli.net/2018/06/08/5b1a5f81f12ba.png" alt="图片描述">Term.Name处<img src="https://i.loli.net/2018/06/08/5b1a5fb82699e.png" alt="图片描述">Type.Name 处<br>还有一个是Name处</li></ul></li><li>实验的最终结果：<ul><li><img src="https://i.loli.net/2018/06/08/5b1a6012ac69a.png" alt="图片描述">Scala 源代码</li><li><img src="https://i.loli.net/2018/06/08/5b1a604443ddf.png" alt="图片描述"> 提取的叶子节点</li><li><img src="https://i.loli.net/2018/06/08/5b1a609ceb152.png" alt="图片描述"> 源代码</li><li><img src="https://i.loli.net/2018/06/08/5b1a60d3a65f9.png" alt="图片描述"> 提取的叶子节点</li></ul></li><li>总结：实验结果还未仔细观察，具体的细节有待改进，还有就是上次说的将string值改成<string>等基本数据的转化还未加入。</string></li></ul><p>本博客持续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Scala-AST-叶子节点提取&quot;&gt;&lt;a href=&quot;#Scala-AST-叶子节点提取&quot; class=&quot;headerlink&quot; title=&quot;Scala AST 叶子节点提取&quot;&gt;&lt;/a&gt;Scala AST 叶子节点提取&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;背景：&lt;ul&gt;
&lt;li&gt;前几天由于考试没有来得及整理基础知识，今天在这里先整理一下这两天做的Scala叶子节点的值提取&lt;/li&gt;
&lt;li&gt;Scala 是一门多范式（multi-paradigm）的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。Scala 运行在Java虚拟机上，并兼容现有的Java程序。Scala 源代码被编译成Java字节码，所以它可以运行于JVM之上，并可以调用现有的Java类库。(百度百科）
    
    </summary>
    
      <category term="Scala" scheme="http://daixinyuxuyisen.cn/categories/Scala/"/>
    
    
      <category term="AST" scheme="http://daixinyuxuyisen.cn/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>日记</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/06/daily1/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/06/daily1/</id>
    <published>2018-06-06T12:01:21.000Z</published>
    <updated>2018-06-06T12:20:44.541Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read.</h3><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" password " /> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      the content has been encrypted, enter the password to read.&lt;/br&gt;
    
    </summary>
    
      <category term="日记" scheme="http://daixinyuxuyisen.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://daixinyuxuyisen.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>软件工程复习提纲</title>
    <link href="http://daixinyuxuyisen.cn/2018/06/01/software-review/"/>
    <id>http://daixinyuxuyisen.cn/2018/06/01/software-review/</id>
    <published>2018-06-01T02:10:54.392Z</published>
    <updated>2018-06-06T11:07:32.960Z</updated>
    
    <content type="html"><![CDATA[<p>本博客是根据软件工程最后一节重点课总结的内容，对软件工程的知识进行了简单的梳理</p><h3 id="软件工程简述"><a href="#软件工程简述" class="headerlink" title="软件工程简述"></a>软件工程简述</h3><ul><li>软件工程定义：<ul><li>软件工程是研究应用如何以系统性的、规范化的、可定量的过程化方法</li><li>去开发和维护软件，</li><li>以及如何把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术结合起来</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本博客是根据软件工程最后一节重点课总结的内容，对软件工程的知识进行了简单的梳理&lt;/p&gt;
&lt;h3 id=&quot;软件工程简述&quot;&gt;&lt;a href=&quot;#软件工程简述&quot; class=&quot;headerlink&quot; title=&quot;软件工程简述&quot;&gt;&lt;/a&gt;软件工程简述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;软
      
    
    </summary>
    
      <category term="学科复习" scheme="http://daixinyuxuyisen.cn/categories/%E5%AD%A6%E7%A7%91%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="软件工程" scheme="http://daixinyuxuyisen.cn/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
